package nz.ac.auckland.recipe.dto;

import java.util.Set;

import javax.persistence.ElementCollection;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;

import nz.ac.auckland.recipe.domain.*;
import nz.ac.auckland.recipe.jaxb.*;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.joda.time.DateTime;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;

/* Class to represent a Parolee. 
 * 
 * An instance of this class represents a DTO Parolee. A DTO Parolee includes
 * a subset of Parolee data, and DTO Parolees objects are exchanged between 
 * clients and the Parolee Web service.
 * 
 * A DTO Parolee is described by:
 * - Personal details: lastname, firstname, gender, date-of-birth, home address;
 * - Curfew: any constraints on the Parolee's location;
 * - Criminal profile: criminal history of the Parolee;
 * - Last know location: timestamped latitude/longitude position.
 * 
 * A Parolee is uniquely identified by an id value of type long.
 * 
 */
@XmlRootElement(name="recipe")
@XmlAccessorType(XmlAccessType.FIELD)
public class Recipe {
	
	@XmlAttribute(name="id")
	private long _id;
	
	@XmlElement(name="name")
	private String _name;
	
	@XmlElement(name="content")
	private String _content;
	
	@XmlAttribute(name="creation-time-stamp")
	private DateTime _creationTimeStamp; 
	
	@XmlAttribute(name="author")
	@XmlJavaTypeAdapter(value=BakerAdapter.class)
	private Baker _author; 
	
	@XmlAttribute(name="category")
//	@XmlJavaTypeAdapter(value=CategoryAdapter.class)
	private Category _category; 
	
//	@XmlJavaTypeAdapter(value=ReviewAdapter.class)
	@XmlAttribute(name="reviews")
	private Set<Review> _reviews; 
	
	protected Recipe() {
		
	}
	
	/**
	 * Constructs a DTO Parolee instance. This method is intended to be called
	 * by Web service clients when creating new Parolees. The id field is not 
	 * required because it is generated by the Web service. Similarly, the 
	 * last-known-position field is not required. Of the constructor's 
	 * parameters, all fields must be non-null with the exception of curfew, 
	 * which is optional (not all Parolees are subject to a curfew).
     *
	 */
	public Recipe(String name,
			String content,
			Baker author,
			Category category) throws IllegalArgumentException {
		this(0,name,content,null, author,category,null);
		

	}
	
	/**
	 * Constructs a DTO Parolee instance. This method should NOT be called by 
	 * Web Service clients. It is intended to be used by the Web Service 
	 * implementation when creating a DTO Parolee from a domain-model Parolee 
	 * object.
	 */
	public Recipe(long id,
			String name,
			String content,
			DateTime creationTimeStamp, 
			Baker author,
			Category category,
			Set<Review> reviews
			) {
		
		_id = id;
		_name = name;
		_content = content;
		_author = author;
		_category = category;
		_reviews = reviews; 
	}
	
	public long getId() {
		return _id;
	}
	
	
	public String getName() {
		return _name;
	}
	
	public void setName(String name) {
		_name = name;
	}
	
	public String getContent(){
		return _content;
	}
	
	public void setContent(String content){
		_content = content; 
	}
	
	public void setAuthor(Baker author){
		_author = author; 
	}

	public Baker getAuthor(){
		return _author; 
	}
	
	public void setCategory(Category category){
		_category = category; 
	}

	public Category getCategory(){
		return _category; 
	}
	
	public void setReviews(Set<Review> reviews){
		_reviews = reviews; 
	}
	
	public Set<Review> getReviews(){
		return _reviews; 
	}
	
	@Override
	public String toString() {
		StringBuffer buffer = new StringBuffer();
				
		buffer.append("Recipe: { [");
		buffer.append(_id);
		buffer.append("], ");
		if(_name != null) {
			buffer.append(_name);
		}
		buffer.append(", ");
		if(_content != null) {
			buffer.append(_content);
		}
		buffer.append("; ");
		if(_author != null) {
			buffer.append(_author.toString());
		}
		buffer.append("; ");
		
		if(_category != null) {
			buffer.append((_category.toString()));
		}
		buffer.append("; ");
		if(_reviews != null) {
			buffer.append(_reviews);
		}
		buffer.append("; ");
				
		
		buffer.append(" }");
		
		return buffer.toString();
	}
	
	@Override
	public boolean equals(Object obj) {
		if (!(obj instanceof Recipe))
            return false;
        if (obj == this)
            return true;

        Recipe rhs = (Recipe) obj;
        return new EqualsBuilder().
            append(_id, rhs._id).
            append(_name, rhs._name).
            append(_content, rhs._content).
            append(_author, rhs._author).
            append(_category, rhs._category).
            append(_reviews, rhs._reviews).
            isEquals();
	}
	
	@Override
	public int hashCode() {
		return new HashCodeBuilder(17, 31). 
	            append(_id).
	            append(_name).
	            append(_content).
	            append(_author).
	            append(_category).
	            append(_reviews).
	            toHashCode();
	}
}


